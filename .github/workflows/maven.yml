# CI/CD Workflow for Java Web Application with Maven and Docker
# This workflow builds the project, caches dependencies, builds a Docker image, and optionally deploys to a production server.
# For more details, see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

name: Web App CI/CD Flow

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up JDK 11 (Zulu)
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'zulu'
          cache: maven

      - name: Build with Maven
        run: mvn -B package --file pom.xml


  docker-build-push:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - name: Build Docker image
        run: docker build -t your-dockerhub-username/your-image-name:latest .

      - name: Push Docker image to Docker Hub
        run: docker push your-dockerhub-username/your-image-name:latest

  deploy:
    runs-on: ubuntu-latest
    needs: docker-build-push
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to Production Server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_PRIVATE_KEY" | ssh-add -
          ssh -o StrictHostKeyChecking=no user@production-server "docker pull your-dockerhub-username/your-image-name:latest && docker-compose up -d"
